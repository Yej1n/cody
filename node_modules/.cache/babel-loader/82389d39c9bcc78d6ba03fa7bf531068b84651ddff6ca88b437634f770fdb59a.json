{"ast":null,"code":"const axios = require(\"axios\");\nconst {\n  google\n} = require(\"googleapis\");\nconst GITHUB_TOKEN = \"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\";\nconst GOOGLE_API_KEY = \"your_google_api_key\";\nconst GOOGLE_CX = \"your_google_cx_id\";\n\n// GitHub 데이터 가져오기\nasync function fetchGithubTrends(language) {\n  try {\n    const headers = {\n      Authorization: `Bearer ${GITHUB_TOKEN}`\n    };\n    const url = `https://api.github.com/search/repositories?q=language:${language}&sort=stars&order=desc`;\n    const response = await axios.get(url, {\n      headers\n    });\n    return response.data.items.length || 0;\n  } catch (error) {\n    console.error(`GitHub API Error for ${language}:`, error.message);\n    return 0;\n  }\n}\n\n// Stack Overflow 데이터 가져오기\nasync function fetchStackOverflowTrends(tag) {\n  try {\n    var _response$data$items$;\n    const url = `https://api.stackexchange.com/2.3/tags/${tag}/info?site=stackoverflow`;\n    const response = await axios.get(url);\n    return ((_response$data$items$ = response.data.items[0]) === null || _response$data$items$ === void 0 ? void 0 : _response$data$items$.count) || 0;\n  } catch (error) {\n    console.error(`Stack Overflow API Error for ${tag}:`, error.message);\n    return 0;\n  }\n}\n\n// Google Trends 데이터 가져오기\nasync function fetchGoogleTrends(keyword) {\n  try {\n    const service = google.customsearch(\"v1\");\n    const response = await service.cse.list({\n      q: keyword,\n      cx: GOOGLE_CX,\n      key: GOOGLE_API_KEY\n    });\n    return parseInt(response.data.searchInformation.totalResults, 10) || 0;\n  } catch (error) {\n    console.error(`Google API Error for ${keyword}:`, error.message);\n    return 0;\n  }\n}\n\n// 언어별 데이터 분석\nasync function analyzeLanguageTrends(languages) {\n  const results = [];\n  for (const lang of languages) {\n    const githubTrends = await fetchGithubTrends(lang);\n    const stackOverflowTrends = await fetchStackOverflowTrends(lang.toLowerCase());\n    const googleTrends = await fetchGoogleTrends(lang);\n    const trendScore = githubTrends + stackOverflowTrends + googleTrends;\n    results.push({\n      language: lang,\n      github: githubTrends,\n      stackOverflow: stackOverflowTrends,\n      googleTrend: googleTrends,\n      trendScore\n    });\n  }\n  return results.sort((a, b) => b.trendScore - a.trendScore); // 트렌드 점수로 정렬\n}\n\n// API 함수\nasync function getOverallRanking(languages) {\n  return await analyzeLanguageTrends(languages);\n}\nasync function getFrontendRanking() {\n  const frontendLanguages = [\"HTML\", \"CSS\", \"JavaScript\", \"TypeScript\"];\n  return await analyzeLanguageTrends(frontendLanguages);\n}\nasync function getBackendRanking() {\n  const backendLanguages = [\"Python\", \"Java\", \"C#\", \"PHP\", \"Ruby\"];\n  return await analyzeLanguageTrends(backendLanguages);\n}\nasync function getLanguageGrowthRates(languages) {\n  const trends = await analyzeLanguageTrends(languages);\n  return trends.map(lang => ({\n    language: lang.language,\n    growthRate: (lang.googleTrend + lang.github) / lang.trendScore\n  }));\n}\nmodule.exports = {\n  getOverallRanking,\n  getFrontendRanking,\n  getBackendRanking,\n  getLanguageGrowthRates\n};","map":{"version":3,"names":["axios","require","google","GITHUB_TOKEN","GOOGLE_API_KEY","GOOGLE_CX","fetchGithubTrends","language","headers","Authorization","url","response","get","data","items","length","error","console","message","fetchStackOverflowTrends","tag","_response$data$items$","count","fetchGoogleTrends","keyword","service","customsearch","cse","list","q","cx","key","parseInt","searchInformation","totalResults","analyzeLanguageTrends","languages","results","lang","githubTrends","stackOverflowTrends","toLowerCase","googleTrends","trendScore","push","github","stackOverflow","googleTrend","sort","a","b","getOverallRanking","getFrontendRanking","frontendLanguages","getBackendRanking","backendLanguages","getLanguageGrowthRates","trends","map","growthRate","module","exports"],"sources":["/Users/yejin/Documents/BSSM/수업/2학년/웹표준화/bigWeb/bigweb/src/api.js"],"sourcesContent":["const axios = require(\"axios\");\nconst { google } = require(\"googleapis\");\n\nconst GITHUB_TOKEN = \"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\";\nconst GOOGLE_API_KEY = \"your_google_api_key\";\nconst GOOGLE_CX = \"your_google_cx_id\";\n\n// GitHub 데이터 가져오기\nasync function fetchGithubTrends(language) {\n  try {\n    const headers = { Authorization: `Bearer ${GITHUB_TOKEN}` };\n    const url = `https://api.github.com/search/repositories?q=language:${language}&sort=stars&order=desc`;\n    const response = await axios.get(url, { headers });\n    return response.data.items.length || 0;\n  } catch (error) {\n    console.error(`GitHub API Error for ${language}:`, error.message);\n    return 0;\n  }\n}\n\n// Stack Overflow 데이터 가져오기\nasync function fetchStackOverflowTrends(tag) {\n  try {\n    const url = `https://api.stackexchange.com/2.3/tags/${tag}/info?site=stackoverflow`;\n    const response = await axios.get(url);\n    return response.data.items[0]?.count || 0;\n  } catch (error) {\n    console.error(`Stack Overflow API Error for ${tag}:`, error.message);\n    return 0;\n  }\n}\n\n// Google Trends 데이터 가져오기\nasync function fetchGoogleTrends(keyword) {\n  try {\n    const service = google.customsearch(\"v1\");\n    const response = await service.cse.list({\n      q: keyword,\n      cx: GOOGLE_CX,\n      key: GOOGLE_API_KEY,\n    });\n    return parseInt(response.data.searchInformation.totalResults, 10) || 0;\n  } catch (error) {\n    console.error(`Google API Error for ${keyword}:`, error.message);\n    return 0;\n  }\n}\n\n// 언어별 데이터 분석\nasync function analyzeLanguageTrends(languages) {\n  const results = [];\n\n  for (const lang of languages) {\n    const githubTrends = await fetchGithubTrends(lang);\n    const stackOverflowTrends = await fetchStackOverflowTrends(lang.toLowerCase());\n    const googleTrends = await fetchGoogleTrends(lang);\n\n    const trendScore = githubTrends + stackOverflowTrends + googleTrends;\n\n    results.push({\n      language: lang,\n      github: githubTrends,\n      stackOverflow: stackOverflowTrends,\n      googleTrend: googleTrends,\n      trendScore,\n    });\n  }\n\n  return results.sort((a, b) => b.trendScore - a.trendScore); // 트렌드 점수로 정렬\n}\n\n// API 함수\nasync function getOverallRanking(languages) {\n  return await analyzeLanguageTrends(languages);\n}\n\nasync function getFrontendRanking() {\n  const frontendLanguages = [\"HTML\", \"CSS\", \"JavaScript\", \"TypeScript\"];\n  return await analyzeLanguageTrends(frontendLanguages);\n}\n\nasync function getBackendRanking() {\n  const backendLanguages = [\"Python\", \"Java\", \"C#\", \"PHP\", \"Ruby\"];\n  return await analyzeLanguageTrends(backendLanguages);\n}\n\nasync function getLanguageGrowthRates(languages) {\n  const trends = await analyzeLanguageTrends(languages);\n  return trends.map((lang) => ({\n    language: lang.language,\n    growthRate: (lang.googleTrend + lang.github) / lang.trendScore,\n  }));\n}\n\nmodule.exports = {\n  getOverallRanking,\n  getFrontendRanking,\n  getBackendRanking,\n  getLanguageGrowthRates,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}